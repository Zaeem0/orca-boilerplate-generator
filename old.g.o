package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
)

// var data Data
// _ = json.Unmarshal(file, &data.json)
// fmt.Println(data)
// log.Println(string(out.Bytes()))

type Data struct {
	json interface{}
}

type CreativeTemplates struct {
	Collection []CreativeTemplate
}

type CreativeTemplate struct {
	Name       string   `json: "name"`
	Size       string   `json: "size"`
	Width      int      `json: "width"`
	Height     int      `json: "height"`
	FrameLimit int      `json: "frameLimit"`
	Start      []string `json: "start"`
	Middle     []string `json: "middle"`
	End        []string `json: "end"`
	BaseSize   int      `json: "baseSize"`
}

func main() {
	// var data string
	// var err error
	// file := os.Args[1]
	// if data, err = printableJSON(file); err != nil {
	// 	log.Println("Cannot read JSON")
	// }
	// log.Println(data)

	byt, _ := ioutil.ReadFile("creativetemplate.json")

	var dat []map[string]interface{}
	// dat := make([]CreativeTemplate, 0)

	// var dat CreativeTemplates
	if err := json.Unmarshal(byt, &dat); err != nil {
		panic(err)
	}
	fmt.Printf("%+v", dat)
	// dat[0]["baseSize"] = 9999
}

// func printableJSON(filename string) (string, error) {
// 	file, err := ioutil.ReadFile(filename)
// 	if err != nil {
// 		return "", err
// 	}

// 	var out bytes.Buffer
// 	json.Indent(&out, file, "", "\t")
// 	return string(out.Bytes()), nil
// }
